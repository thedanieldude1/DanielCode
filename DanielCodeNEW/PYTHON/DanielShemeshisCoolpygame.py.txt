#-------------------------------------------------------------------------------
# Name:        module1
# Purpose:
#
# Author:      student
#
# Created:     08/08/2016
# Copyright:   (c) student 2016
# Licence:     <your licence>
#-------------------------------------------------------------------------------

import pygame
import sys
from pygame.locals import *
from random import *
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
def subtract(a,b):
    return [a[0]-b[0],a[1]-b[1]]
def add(a,b):
    return [a[0]+b[0],a[1]+b[1]]
def magnitude(val):
    return (val[0]**2+val[1]**2)**0.5
def normalized(val):
    mag = magnitude(val)
    if mag == 0:
        return [0,0]
    return [val[0]/mag,val[1]/mag]
def OrbitalSpeed(mass,distance,semimajoraxis):
    velocity = (mass*(2/distance-1/semimajoraxis))**.5
    return velocity
class physobject(object):
    def __init__(self,pos,vel,mass,world):
        self.Mass = mass
        self.Pos=pos
        self.Vel=vel
        self.Radius=(mass/3.14)**.5
        self.LastPos=pos
        self.LastVel = vel
        self.curgrav =[0,0]
        self.World = world
        self.LastPositions=[]
        self.Color = (randrange(0,255),randrange(0,255),randrange(0,255))
        self.Name = letters[randrange(0,25)]+letters[randrange(0,25)]+letters[randrange(0,25)]#+letters[randrange(0,25)]+letters[randrange(0,25)]
    def nextvelocity(self):
        return add(self.LastVel,[self.curgrav[0]*self.World.timeinterval,self.curgrav[1]*self.World.timeinterval])
    def startvelocity(self):
        return add(self.LastVel,[self.curgrav[0]*self.World.timeinterval/2,self.curgrav[1]*self.World.timeinterval/2])
    def nextpos(self):
        vels = self.nextvelocity()
        return add(self.LastPos,[vels[0]*self.World.timeinterval,vels[1]*self.World.timeinterval])
    def startpos(self):
        vels = self.startvelocity()
        return add(self.LastPos,[vels[0]*self.World.timeinterval,vels[1]*self.World.timeinterval])
    def pretick(self):
        self.curgrav=self.curgravforce()
        #(self.curgrav)
        self.Vel=self.nextvelocity()
        self.Pos=self.nextpos()
    def tick(self):
        self.LastVel=self.Vel
        self.LastPos=self.Pos

    def firstpretick(self):
        self.curgrav=self.curgravforce()
        self.Vel=self.startvelocity()
        self.Pos=self.startpos()
    def curgravforce(self):
        force = [0,0]
        for objec in self.World.Objects:
            if(self.Pos==objec.Pos):
                continue
            delta = normalized(subtract(self.LastPos,objec.LastPos))
            distance = magnitude(subtract(self.LastPos,objec.LastPos))
            theforce = objec.Mass/(distance*distance)
            force = add(force,[delta[0]*theforce,delta[1]*theforce])
        return [-force[0],-force[1]]
class world(object):
    def __init__(self):
        self.Objects=[]
        self.timeinterval =0.1
        self.DoCollisions=True;
    def tick(self):
        for thing in self.Objects:
            thing.pretick()
        for thing in self.Objects:
            thing.tick()
        if self.DoCollisions:
            for thing in self.Objects:
                for thing2 in self.Objects:
                    if thing == thing2:
                        continue;
                    if magnitude(subtract(thing.Pos,thing2.Pos))<=thing.Radius+thing2.Radius:
                        momentum1 = [thing.Vel[0]*thing.Mass,thing.Vel[1]*thing.Mass]
                        momentum2 = [thing2.Vel[0]*thing2.Mass,thing2.Vel[1]*thing2.Mass]
                        totalmomentum = add(momentum1,momentum2)
                        totalmass = thing2.Mass+thing.Mass
                        dominantbody = thing2
                        nondominant = thing
                        if thing.Mass >=thing2.Mass:
                            dominantbody=thing
                            nondominant=thing2
                        newvel =[totalmomentum[0]/totalmass,totalmomentum[1]/totalmass]
                        self.Objects.remove(nondominant)
                        dominantbody.Vel=newvel;
                        dominantbody.LastVel=newvel;
                        dominantbody.Mass=totalmass;
                        dominantbody.Radius = (totalmass/3.14)**.5
                        #print("collision Happend! "+dominantbody.Name)
    def starttick(self):
        for thing in self.Objects:
            thing.firstpretick()
        for thing in self.Objects:
            thing.tick()
    def getCenterOfMass(self):
        center=[0,0]
        totalmass=0
        for object in self.Objects:
            center = add(center,[(object.Pos[0])*object.Mass,(object.Pos[1])*object.Mass])
            totalmass+=object.Mass
        return [center[0]/totalmass,center[1]/totalmass]
def defineobjects(world2):
    world2.Objects.append(physobject([0,0],[0,0],6000000,world2))
    #world2.Objects.append(physobject([0,4000],[0,-400],60000,world2))
    world2.Objects[0].Color = (255,255,0)
    #world2.Objects.append(physobject([150,0],[0,141.213595/2],3000000,world2))
   # world2.Objects.append(physobject([600,0],[0,31.6227766+OrbitalSpeed(1000000000,75000,75000)],100,world2))
  #  world2.Objects.append(physobject([1200,0],[0,22.3606798+OrbitalSpeed(1000000000,75000,75000)],200,world2))
    #world2.Objects.append(physobject([2400,0],[0,OrbitalSpeed(600000,2400,5000)+OrbitalSpeed(1000000000,75000,75000)],2000,world2))

  #  world2.Objects.append(physobject([2500,0],[0,OrbitalSpeed(600000,2400,5000)+OrbitalSpeed(1000000000,75000,75000)-OrbitalSpeed(2000,100,95)],50,world2))
   # world2.Objects.append(physobject([2550,0],[0,OrbitalSpeed(600000,2400,5000)+OrbitalSpeed(1000000000,75000,75000)-OrbitalSpeed(2000,150,160)],10,world2))
    ##world2.Objects.append(physobject([7500,0],[0,OrbitalSpeed(600000,7500,20000)+OrbitalSpeed(1000000000,75000,75000)],5000,world2))
   # world2.Objects.append(physobject([75000,0],[0,0],1000000000,world2))

   # world2.Objects.append(physobject([7000,0],[0,OrbitalSpeed(600000,7500,20000)+OrbitalSpeed(1000000000,75000,75000)+OrbitalSpeed(5000,500,450)],100,world2))
   # world2.Objects.append(physobject([7660,0],[0,OrbitalSpeed(600000,7500,20000)+OrbitalSpeed(1000000000,75000,75000)-OrbitalSpeed(5000,160,160)],10,world2))
   # world2.Objects.append(physobject([30000,0],[0,OrbitalSpeed(600000,30000,30000)+OrbitalSpeed(1000000000,75000,75000)],100000,world2))
   # world2.Objects.append(physobject([32000,0],[0,OrbitalSpeed(600000,30000,30000)+OrbitalSpeed(1000000000,75000,75000)-OrbitalSpeed(100000,2000,2500)],10000,world2))
   # world2.Objects.append(physobject([32000,300],[OrbitalSpeed(10000,300,300),OrbitalSpeed(600000,30000,30000)-OrbitalSpeed(100000,2000,2500)+OrbitalSpeed(1000000000,75000,75000)],2000,world2))
    #world2.Objects.append(physobject([32030,300],[OrbitalSpeed(10000,300,300),OrbitalSpeed(600000,30000,30000)-OrbitalSpeed(100000,2000,2500)+OrbitalSpeed(1000000000,75000,75000)-OrbitalSpeed(2000,30,30)],100,world2))
    for i in range(0,8):
        x = randrange(-100000,100000)
        pos = abs(randrange(abs(x),100000))
        Orbspeed = OrbitalSpeed(6000000,abs(x),pos);
        mass = randrange(1,100000)
        radius = (mass/3.14)**0.5
        world2.Objects.append(physobject([0,x],[Orbspeed,0],mass,world2))
        if(randrange(0,100)>90):
            for i in range(0,randrange(1,3)):
                y = randrange(int(radius*2),int(radius*5))
                pos2  = randrange(abs(y),int(radius*5))
                mass2 = randrange(1,int(mass/4))
                world2.Objects.append(physobject([0,y+x],[Orbspeed-OrbitalSpeed(mass,y,pos),0],mass2,world2))
    world2.starttick()
pygame.init()
screen = pygame.display.set_mode((800,800))
pygame.display.set_caption('The best most epic thing ever in the world that you have ever seen of a simulation of newtonian gravity that trumps all competition speaking of trump he is a really memey dude i dont want him to be president but he is pretty funny')
screen.fill((255,255,255))
world1=world()
world1.scalefactor = 0.15
defineobjects(world1)
setoff = [400,400]
pause = False
SelectedPlanet = -1;

main_clock=pygame.time.Clock()

myfont = pygame.font.SysFont("monospace",15)
while True:
    PlanetAmount = len(world1.Objects)-1
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type==KEYDOWN:
            if event.key == K_PLUS or event.key == K_EQUALS:
                world1.scalefactor+=.05
                #zoomedcenter=pygame.mouse.get_pos()
            elif event.key == K_MINUS:
                world1.scalefactor-=.05
                if world1.scalefactor<0:
                    world1.scalefactor=0.01;
            elif event.key == K_LEFT:
                setoff=[setoff[0]+10/world1.scalefactor,setoff[1]]
            elif event.key == K_RIGHT:
                setoff=[setoff[0]-10/world1.scalefactor,setoff[1]]
            elif event.key == K_DOWN:
                setoff=[setoff[0],setoff[1]-10/world1.scalefactor]
            elif event.key == K_UP:
                setoff=[setoff[0],setoff[1]+10/world1.scalefactor]
            elif event.key == K_p:
                pause = not pause
            elif event.key == K_r:
                setoff = [400,400]
            elif event.key == K_TAB:

                SelectedPlanet+=1
                zoomedcenter = [400,400]
                if SelectedPlanet > PlanetAmount:
                    SelectedPlanet = -1
            elif event.key == K_w:
                if SelectedPlanet>-1:
                    world1.Objects[SelectedPlanet].Vel[1]+=1;
            elif event.key == K_s:
                if SelectedPlanet>-1:
                    world1.Objects[SelectedPlanet].Vel[1]-=1;
            elif event.key == K_d:
                if SelectedPlanet>-1:
                    world1.Objects[SelectedPlanet].Vel[0]+=1;
            elif event.key == K_a:
                if SelectedPlanet>-1:
                    world1.Objects[SelectedPlanet].Vel[0]-=1;
        elif event.type==MOUSEBUTTONDOWN:
            setoff=[pygame.mouse.get_pos()[0],pygame.mouse.get_pos()[1]]
    if not pause:

        for i in range(0,100):
            world1.tick()
    screen.fill((255,255,255))
    if SelectedPlanet>-1:
        center=world1.Objects[SelectedPlanet].Pos
        label = myfont.render("Velocity: " +str(world1.Objects[SelectedPlanet].Vel),1,(0,0,0))
        label1 =myfont.render("Pos: "+str(world1.Objects[SelectedPlanet].Pos),1,(0,0,0))
        label2 =myfont.render("Mass: "+str(world1.Objects[SelectedPlanet].Mass),1,(0,0,0))
        label3 = myfont.render("Name: "+world1.Objects[SelectedPlanet].Name,1,(0,0,0))
        screen.blit(label,(10,25))
        screen.blit(label1,(10,50))
        screen.blit(label2,(10,75))
        screen.blit(label3,(10,100))
    else:

        center = world1.getCenterOfMass();
    zoomedcenter = setoff
    #print(zoomedcenter)
    for Object in world1.Objects:
        positionstorender = []
        for k in range(0,len(Object.LastPositions)-1):
            i=(len(Object.LastPositions)-1)-k

            positionstorender.append((Object.LastPositions[i][0]*world1.scalefactor+zoomedcenter[0]-center[0]*world1.scalefactor,(Object.LastPositions[i][1]*world1.scalefactor+zoomedcenter[1]-center[1]*world1.scalefactor)))
        if len(positionstorender)>1:
            pygame.draw.lines(screen,(0,0,0),False,positionstorender)
        pygame.draw.circle(screen,Object.Color,(int((Object.Pos[0]*world1.scalefactor+zoomedcenter[0]-center[0]*world1.scalefactor)),int(Object.Pos[1]*world1.scalefactor+zoomedcenter[1]-center[1]*world1.scalefactor)),int(Object.Radius*world1.scalefactor))
        if not pause:
            Object.LastPositions.append((int((Object.Pos[0])),int(Object.Pos[1])));

            if len(Object.LastPositions)>200:
                Object.LastPositions.pop(0)

    #smain_clock.tick(5)
    pygame.display.update()